---
import { t } from "../i18n";
import { getRelativeLocaleUrl } from "astro:i18n";
import { navItems } from "../data/navItems";

import AmIRealLogo from "./logo/am-i-real-logo.astro";

const locale = Astro.props.locale || 'en';
---
<header id="main-header" class="fixed top-0 left-0 w-full z-50 transition-all duration-300 ease-in-out h-[70px] bg-transparent">
  <div class="px-5 flex justify-between items-center h-full">
    <div class="logo">
      <a href="/" class="text-white text-3xl font-bold transition-colors duration-300">
        <AmIRealLogo width="50" height="50" class="transition-colors" />
      </a>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden md:block">
      <ul class="flex gap-8">
        {navItems.map(({ path, key }) => (
          <li>
            <a href={getRelativeLocaleUrl(locale, path)} class="text-white font-medium transition-colors duration-300">
              {t(locale, key)}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <!-- Mobile Burger Button -->
    <button 
      id="mobile-menu-button" 
      class="md:hidden flex flex-col justify-center items-center w-8 h-8 space-y-1.5 cursor-pointer z-50"
      aria-label="Toggle menu"
      aria-expanded="false"
      aria-controls="mobile-menu"
    >
      <span class="w-6 h-0.5 bg-white transition-all duration-300 transform burger-line-1"></span>
      <span class="w-6 h-0.5 bg-white transition-all duration-300 burger-line-2"></span>
      <span class="w-6 h-0.5 bg-white transition-all duration-300 burger-line-3"></span>
    </button>
  </div>
</header>

<!-- Mobile Menu auÃŸerhalb vom Header -->
<div 
  id="mobile-menu" 
  class="fixed inset-0 bg-black/90 flex flex-col items-center justify-center transform translate-x-full opacity-0 pointer-events-none transition-transform duration-300 ease-in-out md:hidden z-40"
>
  <nav class="text-center">
    <ul class="flex flex-col gap-8">
      {navItems.map(({ path, key }) => (
        <li>
          <a href={getRelativeLocaleUrl(locale, path)} class="font-balete-black text-white text-2xl font-medium hover:text-gray-300 transition-colors duration-300">
            {t(locale, key)}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</div>

<script>
  const header = document.getElementById("main-header");
  const links = document.querySelectorAll("header a");
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const burgerLines = document.querySelectorAll(".burger-line-1, .burger-line-2, .burger-line-3");
  const mobileMenuLinks = document.querySelectorAll("#mobile-menu a");

  let isMenuOpen = false;

  requestAnimationFrame(() => {
    mobileMenu?.classList.remove("opacity-0", "pointer-events-none");
  });

  function toggleMobileMenu() {
    isMenuOpen = !isMenuOpen;

    mobileMenuButton?.setAttribute("aria-expanded", isMenuOpen.toString());

    if (isMenuOpen) {
      mobileMenu?.classList.remove("translate-x-full");
      mobileMenu?.classList.add("translate-x-0");
      document.body.style.overflow = "hidden";

      burgerLines[0]?.classList.add("rotate-45", "translate-y-2");
      burgerLines[1]?.classList.add("opacity-0");
      burgerLines[2]?.classList.add("-rotate-45", "-translate-y-2");
    } else {
      mobileMenu?.classList.remove("translate-x-0");
      mobileMenu?.classList.add("translate-x-full");
      document.body.style.overflow = "";

      burgerLines[0]?.classList.remove("rotate-45", "translate-y-2");
      burgerLines[1]?.classList.remove("opacity-0");
      burgerLines[2]?.classList.remove("-rotate-45", "-translate-y-2");
    }
  }

  mobileMenuButton?.addEventListener("click", toggleMobileMenu);

  mobileMenuLinks.forEach(link => {
    link.addEventListener("click", () => {
      if (isMenuOpen) toggleMobileMenu();
    });
  });

  window.addEventListener("scroll", () => {
    if (window.scrollY > 50) {
      header?.classList.add("bg-white/30", "blurry", "shadow-md", "h-[80px]");
      header?.classList.remove("bg-transparent");

      links.forEach((link) => {
        link.classList.remove("text-white");
        link.classList.add("text-black");
      });

      burgerLines.forEach(line => {
        line.classList.remove("bg-white");
        line.classList.add("bg-black");
      });

    } else {
      header?.classList.remove("bg-white/30", "blurry", "shadow-md", "h-[80px]");
      header?.classList.add("bg-transparent");

      links.forEach((link) => {
        link.classList.remove("text-black");
        link.classList.add("text-white");
      });

      burgerLines.forEach(line => {
        line.classList.remove("bg-black");
        line.classList.add("bg-white");
      });
    }
  });
</script>

<style>
  .burger-line-1, .burger-line-2, .burger-line-3 {
    transform-origin: center;
  }

  .blurry {
    backdrop-filter: blur(5px);
  }
</style>
