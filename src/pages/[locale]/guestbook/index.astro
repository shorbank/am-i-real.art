---
import Layout from "../../../layouts/Guestbook.astro";
import { t } from "../../../i18n";
import { getRelativeLocaleUrl } from "astro:i18n";
import { db, Comment } from "astro:db";

export async function getStaticPaths() {
  return [{ params: { locale: "en" } }, { params: { locale: "de" } }];
}

const { locale } = Astro.params;

const comments = await db
  .select()
  .from(Comment)
  .orderBy(Comment.createdAt)
  .limit(95); // Obergrenze

const MIN_Z = -20000;
const MAX_Z = 1000;
const panelCount = comments.length;
const Z_STEP = (MAX_Z - MIN_Z) / panelCount;

const classCycle = [
  "position-c2", "position-b2", "position-c3", "position-a3",
  "position-b1", "position-c4", "position-a2", "position-a4",
  "position-b3", "position-c1", "position-b4", "position-a1"
];
---

<Layout>
  <div class="relative h-screen w-screen overflow-hidden bg-white text-black">
    <h1 class="absolute z-10 top-6 left-6 text-xl font-bold">{t(locale, "guestbook.title")}</h1>
    <a class="text-blue-500" href={getRelativeLocaleUrl(locale, "guestbook/new")}>
      {t(locale, "guestbook.new_entry")}
    </a>

    <div
      id="panel-container"
      class="fixed top-1/2 left-1/2 w-full h-[60%] max-w-[102.4rem] -translate-x-1/2 -translate-y-1/2 pointer-events-none perspective-[1000px] [transform-style:preserve-3d]">
      {comments.map((c, i) => {
        const zPos = MIN_Z + i * Z_STEP;
        const posClass = classCycle[i % classCycle.length];
        return (
          <div
            class="panel absolute top-1/2 left-1/2 w-full h-[150vw] grid grid-cols-2 grid-rows-3 text-black text-xl font-bold md:grid-cols-4 md:grid-rows-3 md:h-[75vw]"
            style={`transform: translate3d(-50%, -50%, ${zPos}px); opacity: 0;`}
            data-z={zPos}
          >
            <div class={`${posClass} windowpanel`}>
              <div class="title-bar">
                <span>{c.author}</span>
              </div>
              <div class="content">
                <p>{c.body}</p>
                <p>{new Date(c.createdAt).toLocaleDateString(locale)}</p>
              </div>
            </div>
          </div>
        );
      })}
    </div>

    <script type="module" is:inline>
      const MIN_Z = -20000;
      const MAX_Z = 1000;
      let speed = 1.5;
      let scrollTimeout;

      const panels = Array.from(document.querySelectorAll(".panel"));
      panels.forEach(panel => {
        panel.zPosition = parseFloat(panel.dataset.z);
      });

      function animate() {
        panels.forEach((panel) => {
          panel.zPosition += speed;

          if (speed > 0 && panel.zPosition > MAX_Z) {
            panel.zPosition = MIN_Z;
          } else if (speed < 0 && panel.zPosition < MIN_Z) {
            panel.zPosition = MAX_Z;
          }

          let opacity = 0;
          if (panel.zPosition > -2000 && panel.zPosition < -1700) {
            opacity = (panel.zPosition + 2000) / 300;
          } else if (panel.zPosition >= -1700 && panel.zPosition <= MAX_Z) {
            opacity = 1;
          }

          panel.style.opacity = opacity.toFixed(2);
          panel.style.transform = `translate3d(-50%, -50%, ${panel.zPosition}px)`;
        });

        requestAnimationFrame(animate);
      }

      animate();

      window.addEventListener("wheel", (event) => {
        const scrollDelta = event.deltaY;

        if (scrollDelta > 0) {
          speed = Math.min(speed + 2, 30);
        } else {
          speed = Math.max(speed - 2, -30);
        }

        clearTimeout(scrollTimeout);

        function decaySpeed() {
          if (Math.abs(speed) > 5) {
            speed += speed > 0 ? -1 : 1;
            scrollTimeout = setTimeout(decaySpeed, 50);
          }
        }

        scrollTimeout = setTimeout(decaySpeed, 100);
      });
    </script>
  </div>
</Layout>
