---
import Layout from "../../../layouts/Guestbook.astro";
import { t } from "../../../i18n";
import { getRelativeLocaleUrl } from "astro:i18n";

import { getLatestComments } from "../../../../lib/comments";
import { guestbookImages as images } from "../../../../lib/assets";

import CommentPanel from "../../../components/guestbook/CommentPanel.astro";
import ImagePanel from "../../../components/guestbook/ImagePanel.astro";

const { locale } = Astro.params;
const comments = await getLatestComments();

const MIN_Z = -20000;
const MAX_Z = 1000;
const panelCount = comments.length;
const Z_STEP = (MAX_Z - MIN_Z) / panelCount;

const classCycle = [
  "position-c2", "position-b2", "position-c3", "position-a3",
  "position-b1", "position-c4", "position-a2", "position-a4",
  "position-b3", "position-c1", "position-b4", "position-a1"
];
---

<Layout>
  <style>
    video::-webkit-media-controls {
      display: none !important;
    }
  </style>

  <div class="relative h-[100dvh] w-screen overflow-hidden text-black">

    <video
      muted
      autoplay
      playsinline
      loop
      preload="auto"
      poster="/TV-static0.jpg"
      class="absolute top-0 left-0 w-full h-full object-cover z-[-1] opacity-50">
      <source src="/TV-static.mp4" type="video/mp4" />
      <img src="/TV-static0.jpg" alt="Fallback background" class="w-full h-full object-cover" />
    </video>

    <a class="font-balete-black text-2xl bg-white/70 border-2 px-4 py-2 absolute bottom-5 left-5" href={getRelativeLocaleUrl(locale, "guestbook/new")}>
      {t(locale, "guestbook.new_entry")}
    </a>

    <div
      id="panel-container"
      class="fixed top-1/2 left-1/2 w-full h-[60%] max-w-[102.4rem] -translate-x-1/2 -translate-y-1/2 pointer-events-none perspective-[1000px] [transform-style:preserve-3d]">
      
      {comments.map((c, i) => {
        const zPos = MIN_Z + i * Z_STEP;
        const posClass = classCycle[i % classCycle.length];

        if ((i + 1) % 6 === 0) {
          const imageSrc = images[i % images.length];
          return (
            <ImagePanel imageSrc={imageSrc} zPos={zPos} posClass={posClass} />
          );
        }

        return (
          <CommentPanel comment={c} zPos={zPos} posClass={posClass} locale={locale} />
        );
      })}
    </div>

    <script type="module" is:inline>
      const MIN_Z = -20000;
      const MAX_Z = 1000;
      let speed = 2;
      let scrollTimeout;

      const panels = Array.from(document.querySelectorAll(".panel"));
      panels.forEach(panel => {
        panel.zPosition = parseFloat(panel.dataset.z);
      });

      function animate() {
        panels.forEach((panel) => {
          panel.zPosition += speed;

          if (speed > 0 && panel.zPosition > MAX_Z) {
            panel.zPosition = MIN_Z;
          } else if (speed < 0 && panel.zPosition < MIN_Z) {
            panel.zPosition = MAX_Z;
          }

          let opacity = 0;
          if (panel.zPosition > -2000 && panel.zPosition < -1700) {
            opacity = (panel.zPosition + 2000) / 300;
          } else if (panel.zPosition >= -1700 && panel.zPosition <= MAX_Z) {
            opacity = 1;
          }

          panel.style.opacity = opacity.toFixed(2);
          panel.style.transform = `translate3d(-50%, -50%, ${panel.zPosition}px)`;
        });

        requestAnimationFrame(animate);
      }

      function decaySpeed() {
        if (Math.abs(speed) > 5) {
          speed += speed > 0 ? -1 : 1;
          scrollTimeout = setTimeout(decaySpeed, 50);
        }
      }

      animate();

      // Desktop scroll
      window.addEventListener("wheel", (event) => {
        const scrollDelta = event.deltaY;

        if (scrollDelta > 0) {
          speed = Math.min(speed + 2, 30);
        } else {
          speed = Math.max(speed - 2, -30);
        }

        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(decaySpeed, 100);
      });

      // Mobile touch scroll
      let touchStartY = null;

      window.addEventListener("touchstart", (e) => {
        touchStartY = e.touches[0].clientY;
      });

      window.addEventListener("touchmove", (e) => {
        if (touchStartY === null) return;

        const touchEndY = e.touches[0].clientY;
        const deltaY = touchStartY - touchEndY;

        if (Math.abs(deltaY) > 10) {
          if (deltaY > 0) {
            speed = Math.min(speed + 2, 30);
          } else {
            speed = Math.max(speed - 2, -30);
          }

          clearTimeout(scrollTimeout);
          scrollTimeout = setTimeout(decaySpeed, 100);
        }

        touchStartY = touchEndY;
      });
    </script>
  </div>
</Layout>
